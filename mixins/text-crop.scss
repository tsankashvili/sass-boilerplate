//
// text-crop mixin - remove top space from your text
/// @group Selectors
/// @param {Number (Unitless value) | string} $line-height [1.3]
/// @param {Number (with unit) | string} $top-adjustment [0px] - top cropping
/// @param {Number (with unit) | string} $bottom-adjustment [0px] - bottom cropping
/// @require {Number (with unit) | string} $base-line-height
/// @author Kevin Powell
/// @link https://medium.com/eightshapes-llc/cropping-away-negative-impacts-of-line-height-84d744e016ce
/// @link http://text-crop.eightshapes.com
/// @example @include text-crop; - Will use default line height of $base-line-height
/// @example @include text-crop($line-height: 2); - Larger line height desired, set the line height via the mixin
/// @example @include text-crop($top-adjustment: -0.5px, $bottom-adjustment: 2px);
//

@mixin text-crop($line-height: 1.3, $top-adjustment: 0px, $bottom-adjustment: 0px) {
    // Configured in Step 1
    $top-crop: 9;
    $bottom-crop: 0;
    $crop-font-size: 36;
    $crop-line-height: 1.2;

    // Apply values to calculate em-based margins that work with any font size
    $dynamic-top-crop: max(($top-crop + ($line-height - $crop-line-height) * ($crop-font-size / 2)), 0) / $crop-font-size;
    $dynamic-bottom-crop: max(($bottom-crop + ($line-height - $crop-line-height) * ($crop-font-size / 2)), 0) / $crop-font-size;

    // Mixin output
    line-height: $line-height;

    &::before,
    &::after {
        content: '';
        display: block;
        height: 0;
        width: 0;
    }

    &::before {
        margin-bottom: calc(-#{$dynamic-top-crop}em + #{$top-adjustment});
    }

    &::after {
        margin-top: calc(-#{$dynamic-bottom-crop}em + #{$bottom-adjustment});
    }
}
