//
/// @group Utilities
/// @access private
/// @author Hugo Giraudel
/// @link https://github.com/sass/sass/issues/852#issuecomment-22108328
/// @link https://hugogiraudel.com/2013/08/08/advanced-sass-list-functions
//

//
// Returns first element of $list
/// @param $list {list} : list
/// @return [Literal]
/// @example first(a, b, c) => a
//

@function first($list) {
  @return nth($list, 1);
}

//
// Returns last element of $list
/// @param $list {list} : list
/// @return [Literal]
/// @example last( (a, b, c) ) => c
//

@function last($list) {
  @return nth($list, length($list));
}

//
// Returns last index of $value in $list
/// @param $list {list} : list
/// @param $value [Literal] : value to be searched for
/// @return [Number]
/// @example last-index( (a, b, c), z )    => null
/// @example last-index( (a, b, c, a), a ) => 4
//

@function last-index($list, $value) {
  @for $i from length($list)*-1 through -1 {
    @if nth($list, abs($i)) == $value {
      @return abs($i);
    }
  }

  @return null;
}

//
// Joins all elements of $list with $glue
/// @param $list {list} : list
/// @param $glue [String] : value to use as a join string
/// @param $is-nested [Boolean] : strictly internal boolean for recursivity
/// @return [String]
/// @example to-string( (a, b, c) )      => abc
/// @example to-string( (a, b, c), '-' ) => a-b-c
/// @example to-string( (a, b c, d) )    => abcd
//

@function to-string($list, $glue: '', $is-nested: false) {
  $result: null;

  @for $i from 1 through length($list) {
    $e: nth($list, $i);

    @if type-of($e) == list {
      $result: $result#{to-string($e, $glue, true)};
    }

    @else {
      $result: if($i != length($list) or $is-nested, $result#{$e}#{$glue}, $result#{$e});
    }
  }

  @return $result;
}

//
// Add $value as first index of $listc
/// @param $list {list} : list
/// @param $value [Literal] : value to prepend to the list
/// @return {list}
/// @example prepend( (a, b, c), z )   => z, a, b, c
/// @example prepend( (a, b, c), y z ) => y z, a, b,
//

@function prepend($list, $value) {
  @return join($value, $list);
}

//
// Add $value at $index in $list
/// @param $list {list} : list
/// @param $index [Number] : index to add
/// @param $value [Literal] : value to add
/// @throw [Error] if $index isn't an integer
/// @throw [Error] if $index is strictly lesser than 1
/// @throw [Error] if $index is strictly greater than length of $list
/// @return {list}
/// @example insert-nth( (a, b, c),  2, z ) => a, z, b, c
/// @example insert-nth( (a, b, c),  0, z ) => error
/// @example insert-nth( (a, b, c), -1, z ) => error
/// @example insert-nth( (a, b, c), 10, z ) => error
//

@function insert-nth($list, $index, $value) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `insert-nth`.";
  }

  @else if $index < 1 {
    @warn "List index 0 must be a non-zero integer for `insert-nth`";
  }

  @else if $index > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
  }

  @else {
    $result: ();

    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      }

      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

//
// Replace value at $index from $list by $value
/// @param $list {list} : list
/// @param $index [Number] : index to update
/// @param $value [Literal] : new value for index $index
/// @throw [Error] if $index isn't an integer
/// @throw [Error] if $index is 0
/// @throw [Error] if abs value of $index is strictly greater than length of $list
/// @return {list}
/// @example replace-nth( (a, b, c),   2, z ) => a, z, c
/// @example replace-nth( (a, b, c),   0, z ) => error
/// @example replace-nth( (a, b, c),  -1, z ) => a, b, z
/// @example replace-nth( (a, b, c),  10, z ) => error
/// @example replace-nth( (a, b, c), -10, z ) => error
//

@function replace-nth($list, $index, $value) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `replace-nth`.";
  }

  @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `replace-nth`.";
  }

  @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `replace-nth`.";
  }

  @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      }

      @else {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

//
// Replace $old-value by $new-value in $list
/// @param $list {list} : list
/// @param $old-value [Literal] : value to replace
/// @param $new-value [Literal] : new value for $old-value
/// @param $recursive [Boolean] : enable / disable recursivity
/// @return {List}
/// @example replace( (a, b, c), b, z )         => a, z, c
/// @example replace( (a, b, c), y, z )         => a, b, c
/// @example replace( (a, b, c a), a, z )       => z, b, c z
/// @example replace( (a, b, c a), a, z, true ) => z, b, c z
//

@function replace($list, $old-value, $new-value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, replace(nth($list, $i), $old-value, $new-value, $recursive));
    }

    @else {
      @if nth($list, $i) == $old-value {
        $result: append($result, $new-value);
      }

      @else {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

//
// Remove value from $list at index $index
/// @param $list {list} : list
/// @param $index [Number] : index to remove
/// @throw [Error] if $index isn't an integer
/// @throw [Error] if $index is 0
/// @throw [Error] if abs value of $index is strictly greater then length of $list
/// @return {list}
/// @example remove-nth( (a, b, c),   2 ) => a, c
/// @example remove-nth( (a, b, c),   0 ) => error
/// @example remove-nth( (a, b, c),  -1 ) => a, b
/// @example remove-nth( (a, b, c),  10 ) => error
/// @example remove-nth( (a, b, c), -10 ) => error
//

@function remove-nth($list, $index) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  }

  @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  }

  @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  }

  @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i != $index {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

//
// Remove value(s) $value from $list
/// @param $list {list} : list
/// @param $value [Literal] : value to remove
/// @param $recursive [Boolean] : enable / disable recursivity
/// @return {list}
/// @example remove( (a, b, c),   b )       => a, c
/// @example remove( (a, b, c),   z )       => a, b, c
/// @example remove( (a, b, c b), b )       => a, c b
/// @example remove( (a, b, c b), b, true ) => a, c
//

@function remove($list, $value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, remove(nth($list, $i), $value, $recursive));
    }

    @else if nth($list, $i) != $value {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

//
// Slices $list between $start and $end
/// @param $list {list} : list
/// @param $start [Number] : start index
/// @param $end [Number] : end index
/// @throw [Error] if $start or $end aren't integers
/// @throw [Error] if $start is greater than $end
/// @throw [Error] if $start or $end is strictly lesser than 1
/// @throw [Error] if $start is strictly greater than length of $list
/// @throw [Error] if $end is strictly greater than length of $list
/// @return {list}
/// @example slice( (a, b, c, d),  2, 3 ) => b, c
/// @example slice( (a, b, c, d),  3, 2 ) => error
/// @example slice( (a, b, c, d),  3, 5 ) => error
/// @example slice( (a, b, c, d), -1, 3 ) => error
/// @example slice( (a, b, c, d),  0, 3 ) => error
/// @example slice( (a, b, c, d),  3, 3 ) => c
//

@function slice($list, $start: 1, $end: length($list)) {
  $result: null;

  @if type-of($start) != number or type-of($end) != number {
    @warn "Either $start or $end are not a number for `slice`.";
  }

  @else if $start > $end {
    @warn "The start index has to be lesser than or equals to the end index for `slice`.";
  }

  @else if $start < 1 or $end < 1 {
    @warn "List indexes must be non-zero integers for `slice`.";
  }

  @else if $start > length($list) {
    @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
  }

  @else if $end > length($list) {
    @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
  }

  @else {
    $result: ();

    @for $i from $start through $end {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

//
// Reverses the order of $list
/// @param $list {list} : list
/// @param $recursive [Boolean] : enable / disable recursivity
/// @return {list}
/// @example reverse( (a, b, c) )         => c, b, a
/// @example reverse( (a, b, c a) )       => c a, b, a
/// @example reverse( (a, b, c a), true ) => a c, b, a
/// @example reverse( a )                 => a
//

@function reverse($list, $recursive: false) {
   $result: ();

   @for $i from length($list)*-1 through -1 {
      @if type-of(nth($list, abs($i))) == list and $recursive {
        $result: append($result, reverse(nth($list, abs($i)), $recursive));
      }

      @else {
        $result: append($result, nth($list, abs($i)));
      }
   }

   @return $result;
}

//
// Shift indexes from $list of $value
/// @param $list {list} : list
/// @param $value [Number] : number of position between old and new indexes
/// @return {list}
/// @example loop( (a, b, c, d, e) )     => e, a, b, c, d
/// @example loop( (a, b, c, d, e),  2 ) => d, e, a, b, c
/// @example loop( (a, b, c, d, e), -2 ) => c, d, e, a, b
//

@function loop($list, $value: 1) {
  $result: ();

  @for $i from 0 to length($list) {
    $result: append($result, nth($list, ($i - $value) % length($list) + 1));
  }

  @return $result;
}

//
/// converts a string to a list
/// @param {$string} $string
/// @param {string} $separator
/// @param {number} $startAt
/// @example str-to-list(a b c d) => a,b,c,d
/// @example str-to-list(a-b-c-d,'-') => a,b,c,d
/// @link https://gist.github.com/benib/92b22ef0716d571d796a
//

@function str-to-list($string, $separator: ' ', $startAt: 1) {
    $workStr: str-slice($string,$startAt);
    $list: ();
    $indexOfFirstSpace: str-index($workStr,$separator);
    @if $indexOfFirstSpace == null {
        $list: ($workStr);
    } @else {
        $list: (str-slice($workStr, 1, $indexOfFirstSpace - 1));
        $list: join($list,str-to-list($workStr,$separator,$startAt: $indexOfFirstSpace + 1));
    }
    @return $list;
}
