//
/// @group Math
/// @author xi
/// @link https://github.com/xi/sass-planifolia/blob/master/sass/math.scss
//

/// Pi
/// @type Number
$pi: 3.141592653589793;

/// @access private
$pi: $pi;

/// @access private
@function exp-taylor($x, $steps) {
  $item: 1;
  $result: 1;

  @for $i from 1 to $steps {
    $item: $item * $x / $i;
    $result: $result + $item;
  }

  @return $result;
}

/// @access private
@function ln-taylor($x, $steps) {
  $z: ($x - 1) / ($x + 1);
  $power: $z;
  $result: $z;

  @for $i from 1 to $steps {
    $power: $power * $z * $z;
    $result: $result + $power / (2 * $i + 1);
  }

  @return 2 * $result;
}

/// @access private
@function pow-int($base, $exponent) {
  @if $exponent < 0 {
    @return 1 / pow-int($base, -$exponent);
  }
  @else if $exponent == 0 {
    @return 1;
  }
  @else if $exponent == 1 {
    @return $base;
  }
  @else {
    $exp: floor($exponent / 2);
    $pow: pow-int($base, $exp);

    @if $exp * 2 == $exponent {
      @return $pow * $pow;
    }
    @else {
      @return $pow * $pow * $base;
    }
  }
}

/// @access private
@function log-approx($x) {
  @if $x <= 0 {
    @error 'ðŸ”´ Canâ€™t calculate log of #{$x}';
  }
  @else if $x >= 1 {
    // choose the smaller option (-1) because it yield better results in ln()
    @return str-length(inspect(round($x))) - 1;
  }
  @else {
    @return -1 * str-length(inspect(round(1 / $x)));
  }
}

/// @access private
/// @require {function} ln-taylor
/// @require {function} log-approx
/// @require {function} pow-int
@function ln($x, $steps: 32) {
  $ln10: 2.302585092994046;
  $approx: log-approx($x);

  // $y is in range [1, 10]
  $y: $x / pow-int(10, $approx);

  @return $approx * $ln10 + ln-taylor($y, $steps);
}

/// Power function (supports fractional exponents)
/// @param {Number} $x - Number
/// @param {Number} $exponent - Exponent
/// @param {Number} $steps [32] - Steps (level of precision)
/// @return {Number}
/// @require {function} exp-taylor
/// @require {function} ln
/// @require {function} pow-int
/// @require {function} strip-unit
@function pow($x, $exponent, $steps: 32) {
  // We must strip the units and add them back at the end
  $units: $x / strip-unit($x);
  $x: strip-unit($x);

  $exp1: round($exponent);
  $exp2: $exponent - $exp1;
  $pow1: pow-int($x, $exp1);

  @if $exp2 == 0 {
    @return $pow1 * $units;
  }
  @else {
    $y: ln($x, $steps) * $exp2;
    $pow2: exp-taylor($y, $steps);

    @return $pow1 * $pow2 * $units;
  }
}


/// Square root function
/// @param {Number} $x - Number
/// @param {Number} $exponent - Exponent
/// @param {Number} $steps [40] - Steps (level of precision)
/// @return {Number}
/// @require {function} pow
@function sqrt($x, $exponent: 2, $steps: 40) {
  @return pow($x, 1 / $exponent, $steps);
}


/// Factorial function
/// @param {Number} $number
/// @return {Number}
/// @author Daniel Perez Alvarez
/// @link https://unindented.org/articles/trigonometry-in-sass/
@function factorial($number) {
  // Return 1 for 0! or if $number is < 0
  $value: 1;

  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }

  @return $value;
}


/// @access private
@function sin-taylor($x, $steps) {
  // We must strip the units and add them back at the end
  $units: $x / strip-unit($x);
  $x: strip-unit($x);

  $item: $x;
  $result: $x;

  @for $i from 1 to $steps {
    $item: -$item * $x * $x / (2 * $i) / (2 * $i + 1);
    $result: $result + $item;
  }

  @return $result * $units;
}

/// Sine function
/// @param {Number} $x - Number
/// @param {Number} $steps [32] - Steps (level of precision)
/// @return {Number}
/// @require {variable} $pi
/// @require {function} sin
/// @require {function} sin-taylor
@function sin($x, $steps: 32) {
  $y: $x % (2 * $Ï€);

  @if $y > $Ï€ {
    @return -1 * sin($y - $Ï€);
  }
  @else if $y < 0 {
    @return -1 * sin(-$y);
  }
  @else {
    @return sin-taylor($y % (2 * $Ï€), $steps);
  }
}

/// Cosine function
/// @param {Number} $x - Number
/// @param {Number} $steps [32] - Steps (level of precision)
/// @return {Number}
/// @require {variable} $pi
/// @require {function} sin
@function cos($x, $steps: 32) {
  @return sin($x - $Ï€ / 2, $steps);
}

/// Tangent function
/// @param {Number} $x - Number
/// @param {Number} $steps [32] - Steps (level of precision)
/// @return {Number}
/// @require {function} cos
/// @require {function} sin
@function tan($x, $steps: 32) {
  @return sin($x, $steps) / $cos($x, $steps);
}
